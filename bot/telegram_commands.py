import os
import json
import asyncio
import httpx
from dotenv import load_dotenv

class TelegramBot:
    def __init__(self):
        load_dotenv()
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.get_updates_url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
        self.send_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        self.db_service_url = os.getenv("DB_SERVICE_URL")  # URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        self.poll_interval = 1
        self.timeout = 20
        self.wait_to_add_email = set()
        self.waiting_for_unsubscribe_email = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ email
    
    async def send_message(self, chat_id: int, text: str):
        async with httpx.AsyncClient() as client:
            await client.post(self.send_url, data={"chat_id": chat_id, "text": text})

    async def add_user(self, email: str, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.db_service_url}/users",
                json={"email": email, "chat_id": chat_id}
            )
            return response.status_code == 201

    async def delete_user(self, email: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        async with httpx.AsyncClient() as client:
            response = await client.delete(f"{self.db_service_url}/users/{email}")
            return response.status_code == 200

    async def email_exists(self, email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{self.db_service_url}/users/{email}")
            return response.status_code == 200

    async def handle_start(self, chat_id: int):
        self.wait_to_add_email.add(chat_id)
        await self.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π email –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ç–µ—á–∫–∏.")

    async def handle_subscribe(self, chat_id: int):
        self.wait_to_add_email.add(chat_id)
        await self.send_message(chat_id, "‚ùóÔ∏è –ù–∞–ø–∏—à–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫—É.")

    async def handle_email(self, chat_id: int, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç email –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ø–∏—Å–∫–∏, —É–¥–∞–ª—è–µ—Ç email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        if chat_id in self.wait_to_add_email:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email –≤ –±–∞–∑–µ
            if await self.email_exists(text):
                await self.send_message(chat_id, f"‚ùóÔ∏è Email {text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = await self.add_user(text, chat_id)
                if success:
                    await self.send_message(chat_id, f"‚úÖ {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /unsubscribe.")
                else:
                    await self.send_message(chat_id, f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {text} –≤ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.wait_to_add_email.discard(chat_id)

        elif chat_id in self.waiting_for_unsubscribe_email:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email –≤ –±–∞–∑–µ
            if await self.email_exists(text):
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                success = await self.delete_user(text)
                if success:
                    await self.send_message(chat_id, f"‚úÖ Email {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
                else:
                    await self.send_message(chat_id, f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {text} –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await self.send_message(chat_id, f"‚ùóÔ∏è Email {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            self.waiting_for_unsubscribe_email.discard(chat_id)

        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
            await self.send_message(chat_id, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help")

    async def handle_unsubscribe(self, chat_id: int):
        self.waiting_for_unsubscribe_email.add(chat_id)
        await self.send_message(chat_id, "‚ùóÔ∏è –ù–∞–ø–∏—à–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")

    async def handle_help(self, chat_id: int):
        await self.send_message(chat_id, "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ç–µ—á–∫–∏, –Ω–∞–ø–∏—à–∏ /subscribe.\n–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /unsubscribe.")

    async def polling_commands(self):
        offset = 0
        while True:
            params = {"timeout": self.timeout, "offset": offset}
            try:
                async with httpx.AsyncClient() as client:
                    r = await client.get(self.get_updates_url, params=params, timeout=self.timeout + 5)
                updates = r.json().get("result", [])
            except Exception:
                await asyncio.sleep(self.poll_interval)
                continue

            for upd in updates:
                offset = upd["update_id"] + 1
                msg = upd.get("message")
                if not msg or "text" not in msg:
                    continue

                chat_id = msg["chat"]["id"]
                text = msg["text"].strip()

                if text.startswith("/start"):
                    await self.handle_start(chat_id)
                elif text.startswith("/subscribe"):
                    await self.handle_subscribe(chat_id)
                elif "@" in text and "." in text:
                    await self.handle_email(chat_id, text)
                elif text.startswith("/unsubscribe"):
                    await self.handle_unsubscribe(chat_id)
                elif text.startswith("/help"):
                    await self.handle_help(chat_id)
                else:
                    await self.send_message(chat_id, "‚ùóÔ∏è –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

            await asyncio.sleep(self.poll_interval)