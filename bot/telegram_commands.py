import os
import json
import asyncio
import httpx
from dotenv import load_dotenv

class TelegramBot:
    def __init__(self):
        load_dotenv()
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.get_updates_url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
        self.send_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        self.base_dir = os.path.dirname(__file__)
        self.users_file = os.path.join(self.base_dir, "..", "db", "users.json")
        self.poll_interval = 1
        self.timeout = 20
        self.wait_to_add_email = set()
        self.waiting_for_unsubscribe_email = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ email
    
    async def send_message(self, chat_id: int, text: str):
        async with httpx.AsyncClient() as client:
            await client.post(self.send_url, data={"chat_id": chat_id, "text": text})

    def load_users(self):
        try:
            return json.loads(open(self.users_file, encoding="utf-8").read())
        except FileNotFoundError:
            return {}

    def save_users(self, users):
        os.makedirs(os.path.dirname(self.users_file), exist_ok=True)
        with open(self.users_file, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

    def delete_user(self, email: str):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
        users = self.load_users()
        if email in users:
            del users[email]
            self.save_users(users)
            return True
        return False

    async def polling_commands(self):
        offset = 0
        while True:
            params = {"timeout": self.timeout, "offset": offset}
            try:
                async with httpx.AsyncClient() as client:
                    r = await client.get(self.get_updates_url, params=params, timeout=self.timeout + 5)
                updates = r.json().get("result", [])
            except Exception:
                await asyncio.sleep(self.poll_interval)
                continue

            for upd in updates:
                offset = upd["update_id"] + 1
                msg = upd.get("message")
                if not msg or "text" not in msg:
                    continue

                chat_id = msg["chat"]["id"]
                text = msg["text"].strip()

                if text.startswith("/start"):
                    self.wait_to_add_email.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    await self.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π email –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É—Ç–µ—á–∫–∏.")
                
                elif text.startswith("/subscribe"):
                    self.wait_to_add_email.add(chat_id)
                    await self.send_message(chat_id, "‚ùóÔ∏è –ù–∞–ø–∏—à–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫—É.")

                elif "@" in text and "." in text:
                    if chat_id in self.wait_to_add_email:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å /start –∏–ª–∏ /subscribe
                        if text in self.waiting_for_unsubscribe_email:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∫—É
                            self.waiting_for_unsubscribe_email.discard(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏
                        users = self.load_users()
                        users[text] = chat_id
                        self.save_users(users)
                        await self.send_message(chat_id, f"‚úÖ {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /unsubscribe.")
                        self.wait_to_add_email.discard(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    elif chat_id in self.waiting_for_unsubscribe_email:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ email –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
                        users = self.load_users()
                        if text in users:
                            self.delete_user(text)
                            await self.send_message(chat_id, f"‚úÖ Email {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
                        else:
                            await self.send_message(chat_id, f"‚ùóÔ∏è Email {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                        self.waiting_for_unsubscribe_email.discard(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                    else:
                        await self.send_message(chat_id, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ. –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞–¥: /help")

                elif text.startswith("/unsubscribe"):
                    if chat_id in self.wait_to_add_email:
                        self.wait_to_add_email.discard(chat_id)
                    self.waiting_for_unsubscribe_email.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
                    await self.send_message(chat_id, "‚ùóÔ∏è –ù–∞–ø–∏—à–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
                
                elif text.startswith("/help"):
                    await self.send_message(chat_id, "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ç–µ—á–∫–∏, –Ω–∞–ø–∏—à–∏ /subscribe.\n–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /unsubscribe.")
                
                else:
                    await self.send_message(chat_id, "‚ùóÔ∏è –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

            await asyncio.sleep(self.poll_interval)